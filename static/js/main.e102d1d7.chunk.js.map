{"version":3,"sources":["Header.js","firebase.js","DateCards.js","Chat.js","Chats.js","ChatScreen.js","SwipeButtons.js","App.js","serviceWorker.js","index.js"],"names":["Header","backButton","history","useHistory","className","IconButton","onClick","replace","fontSize","to","src","alt","database","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","DateCards","useState","people","setPeople","useEffect","unsubscribe","collection","onSnapshot","snapshot","docs","map","doc","data","person","key","id","preventSwipe","style","backgroundImage","url","name","Chat","message","profilePicture","timestamp","Avatar","Chats","ChatScreen","input","setInput","image","messages","setMessages","value","onChange","e","target","type","placeholder","preventDefault","SwipeButtons","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.e102d1d7.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css'\nimport PersonIcon from '@material-ui/icons/Person';\nimport ForumIcon from '@material-ui/icons/Forum';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport {Link, useHistory} from \"react-router-dom\";\n\nfunction Header({backButton}) {\n\n    const history = useHistory();\n    return (\n        <div className=\"header\">\n\n\n            { backButton\n                ?\n                (<IconButton onClick={()=>history.replace(backButton)}>\n                    <ArrowBackIosIcon fontSize=\"large\" className=\"header__icon\"/>\n                </IconButton>)\n                :\n                (<IconButton>\n                    <PersonIcon className=\"header__icon\" fontSize=\"large\"/>\n                </IconButton>)\n            }\n\n            <Link to=\"/\">\n                <img className=\"header__logo\" src=\"https://kite.zerodha.com/static/images/kite-logo.svg\" alt=\"date\"/>\n            </Link>\n\n            <Link to=\"/chats\">\n                <IconButton>\n                    <ForumIcon className=\"header__icon\" fontSize=\"large\"/>\n                </IconButton>\n            </Link>\n\n        </div>\n    );\n}\n\nexport default Header;","import firebase from 'firebase';\n\n    const firebaseConfig = {\n        apiKey: \"AIzaSyD9d3I_W9FMTHxIcq4ZnSAztMkXlPWmE2M\",\n        authDomain: \"date-c957b.firebaseapp.com\",\n        databaseURL: \"https://date-c957b.firebaseio.com\",\n        projectId: \"date-c957b\",\n        storageBucket: \"date-c957b.appspot.com\",\n        messagingSenderId: \"383735385630\",\n        appId: \"1:383735385630:web:b0a3330f7e3456e67c280f\",\n        measurementId: \"G-JLNMQB98F4\"\n    };\n\n    const firebaseApp = firebase.initializeApp(firebaseConfig);\n\n    const database = firebase.firestore();\n\n    export default database;","import React, {useState, useEffect} from 'react';\nimport TinderCard from 'react-tinder-card'\nimport './DateCards.css'\nimport database from './firebase'\n\nfunction DateCards() {\n\n    const [people, setPeople] = useState([]);\n\n    useEffect(() => {\n        const unsubscribe = database.collection('people').onSnapshot(snapshot => (\n             setPeople(snapshot.docs.map(doc => doc.data()))\n        ));\n\n        return() => {\n            unsubscribe();\n        }\n\n    }, []);\n\n    return (\n        <div>\n            <div className=\"card__container\">\n                {people.map(person => (\n                    <TinderCard\n                        className=\"swipe\"\n                        key={person.id}\n                        preventSwipe={['up','down']}\n                    >\n\n                        <div style={{backgroundImage:`url(${person.url})` }} className=\"card\">\n                            <h3>{person.name}</h3>\n                        </div>\n\n                    </TinderCard>\n\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default DateCards;","import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport {Link} from \"react-router-dom\";\nimport './Chat.css'\n\nfunction Chat({name, message, profilePicture, timestamp}) {\n    return (\n        <Link to={`/chat/${name}`}>\n            <div className=\"chat\">\n                <Avatar className=\"chat__icon\" src={profilePicture} alt={name}/>\n                <div className=\"chat__details\">\n                    <h2>{name}</h2>\n                    <p>{message}</p>\n                </div>\n                <p className=\"chat__timestamp\">{timestamp}</p>\n            </div>\n        </Link>\n\n    );\n}\n\nexport default Chat;","import React from 'react';\nimport Chat from './Chat'\n\nfunction Chats() {\n    return (\n        <div className=\"chats\">\n            <Chat\n                name=\"Lionel Messi\"\n                message=\"LaLa\"\n                timestamp=\"1 minute ago\"\n                profilePicture=\"https://images.hdqwalls.com/download/lionel-messi-5k-2018-1i-1920x1080.jpg\"\n            />\n            <Chat\n                name=\"Cristiano Ronaldo\"\n                message=\"Why you hate me?\"\n                timestamp=\"10 minutes ago\"\n                profilePicture=\"https://images.jagran.com/naidunia/ronaldo_crying_17_09_2019.jpg\"\n            />\n            <Chat\n                name=\"Sachin Tendulkar\"\n                message=\"Consider me someday!\"\n                timestamp=\"1 day ago\"\n                profilePicture=\"https://s3.india.com/wp-content/uploads/2020/07/sachin-tendulkar-1.jpg\"\n            />\n        </div>\n    );\n}\n\nexport default Chats;","import React,{useState} from 'react';\nimport Avatar from '@material-ui/core/Avatar';\n\nimport './ChatScreen.css'\n\nfunction ChatScreen() {\n    const [input, setInput] = useState([\n\n    ]);\n    const [messages, setMessages] = useState([\n        {\n            name:'Sachin Tendulkar',\n            image:'https://s3.india.com/wp-content/uploads/2020/07/sachin-tendulkar-1.jpg',\n            message:'Hey there, can we talk?'\n        },\n        {\n            name:'Sachin Tendulkar',\n            image:'https://s3.india.com/wp-content/uploads/2020/07/sachin-tendulkar-1.jpg',\n            message:'I\\'ll take only 2 minutes'\n        },\n        {\n            message:'Do I know you?'\n        },\n        {\n            name:'Sachin Tendulkar',\n            image:'https://s3.india.com/wp-content/uploads/2020/07/sachin-tendulkar-1.jpg',\n            message:'Consider me someday!'\n        }\n    ]);\n\n    const handleSend = e => {\n        e.preventDefault();\n        setMessages([...messages, {message : input}]);\n        setInput('');\n    };\n    return (\n        <div className=\"chatScreen\">\n            <p className=\"chatScreen__head\">You matched with Sachin on 01/08/2020</p>\n            {messages.map(message =>(\n                message.name ?\n                    (\n                        <div className=\"chatScreen__message\">\n                            <Avatar\n                                className=\"chatScreen__icon\"\n                                src={message.image}\n                                alt={message.name}\n                            />\n                            <p className=\"chatScreen__text\" >{message.message}</p>\n                        </div>\n                    ) :\n                    (\n                        <div className=\"chatScreen__message\">\n                            <p className=\"chatScreen__text__byMe\" >{message.message}</p>\n                        </div>\n                    )\n\n            ))}\n\n\n            <form  className=\"chatScreen__inputForm\">\n                <input value={input} onChange={ e => setInput(e.target.value)} className=\"chatScreen__inputBox\" type=\"text\" placeholder=\"Type a message..\"/>\n                <button onClick={handleSend} type=\"submit\" className=\"chatScreen__inputButton\">Send</button>\n            </form>\n\n        </div>\n    );\n}\n\nexport default ChatScreen;","import React from 'react';\n\nimport ReplayIcon from '@material-ui/icons/Replay';\nimport CloseIcon from '@material-ui/icons/Close';\nimport StarRateIcon from '@material-ui/icons/StarRate';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\n\nimport IconButton from '@material-ui/core/IconButton';\n\nimport './SwipeButtons.css'\n\nfunction SwipeButtons() {\n    return (\n        <div className=\"swipeButtons\">\n            <IconButton className=\"swipeButtons__replay\">\n                <ReplayIcon fontSize=\"large\"/>\n            </IconButton>\n\n            <IconButton className=\"swipeButtons__close\">\n                <CloseIcon fontSize=\"large\"/>\n            </IconButton>\n\n            <IconButton className=\"swipeButtons__star\">\n                <StarRateIcon fontSize=\"large\"/>\n            </IconButton>\n\n            <IconButton className=\"swipeButtons__fav\">\n                <FavoriteIcon fontSize=\"large\"/>\n            </IconButton>\n\n            <IconButton className=\"swipeButtons__flash\">\n                <FlashOnIcon  fontSize=\"large\"/>\n            </IconButton>\n        </div>\n    );\n}\n\nexport default SwipeButtons;","import React from 'react';\nimport './App.css';\nimport Header from './Header'\nimport DateCards from './DateCards'\nimport Chats from './Chats'\nimport ChatScreen from './ChatScreen'\n\nimport SwipeButtons from './SwipeButtons'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Router>\n\n            <Switch>\n                <Route path=\"/chat/:person\">\n                    <Header backButton=\"/chats\" />\n                    <ChatScreen />\n                </Route>\n\n                <Route path=\"/chats\">\n                    <Header backButton=\"/\" />\n                    <Chats/>\n                </Route>\n\n                <Route path=\"/\">\n                    <Header/>\n                    <DateCards/>\n                    <SwipeButtons/>\n                </Route>\n\n            </Switch>\n        </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}