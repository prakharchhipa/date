{"version":3,"sources":["Header.js","firebase.js","DateCards.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","IconButton","fontSize","src","alt","database","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","DateCards","useState","people","setPeople","useEffect","collection","onSnapshot","snapshot","docs","map","doc","data","person","key","id","preventSwipe","style","backgroundImage","url","name","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+TAqBeA,MAff,WACI,OACI,yBAAKC,UAAU,UACX,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,CAAYD,UAAU,eAAeE,SAAS,WAElD,yBAAKF,UAAU,eAAeG,IAAI,uDAAuDC,IAAI,SAC7F,kBAACH,EAAA,EAAD,KACI,kBAAC,IAAD,CAAWD,UAAU,eAAeE,SAAS,a,kDCG1CG,GAJKC,IAASC,cAXN,CACnBC,OAAQ,0CACRC,WAAY,6BACZC,YAAa,oCACbC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKFT,IAASU,aCsBfC,MAhCf,WAAsB,IAAD,EAEWC,mBAAS,IAFpB,mBAEVC,EAFU,KAEFC,EAFE,KAUjB,OANAC,qBAAU,WACNhB,EAASiB,WAAW,UAAUC,YAAW,SAAAC,GAAQ,OAC5CJ,EAAUI,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,gBAE7C,IAGC,6BACI,yBAAK5B,UAAU,mBACVmB,EAAOO,KAAI,SAAAG,GAAM,OACd,kBAAC,IAAD,CACI7B,UAAU,QACV8B,IAAKD,EAAOE,GACZC,aAAc,CAAC,KAAK,SAGpB,yBAAKC,MAAO,CAACC,gBAAgB,OAAD,OAAQL,EAAOM,IAAf,MAAyBnC,UAAU,QAC3D,4BAAK6B,EAAOO,c,eCkBzBC,MAjCf,WACE,OACE,yBAAKrC,UAAU,OAEX,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOsC,KAAK,SACR,8CAEJ,kBAAC,IAAD,CAAOA,KAAK,KACR,kBAAC,EAAD,WCVAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e6ee4bae.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css'\nimport PersonIcon from '@material-ui/icons/Person';\nimport ForumIcon from '@material-ui/icons/Forum';\nimport IconButton from '@material-ui/core/IconButton';\n\nfunction Header() {\n    return (\n        <div className=\"header\">\n            <IconButton>\n                <PersonIcon className=\"header__icon\" fontSize=\"large\"/>\n            </IconButton>\n            <img className=\"header__logo\" src=\"https://kite.zerodha.com/static/images/kite-logo.svg\" alt=\"date\"/>\n            <IconButton>\n                <ForumIcon className=\"header__icon\" fontSize=\"large\"/>\n            </IconButton>\n\n        </div>\n    );\n}\n\nexport default Header;","import firebase from 'firebase';\n\n    const firebaseConfig = {\n        apiKey: \"AIzaSyD9d3I_W9FMTHxIcq4ZnSAztMkXlPWmE2M\",\n        authDomain: \"date-c957b.firebaseapp.com\",\n        databaseURL: \"https://date-c957b.firebaseio.com\",\n        projectId: \"date-c957b\",\n        storageBucket: \"date-c957b.appspot.com\",\n        messagingSenderId: \"383735385630\",\n        appId: \"1:383735385630:web:b0a3330f7e3456e67c280f\",\n        measurementId: \"G-JLNMQB98F4\"\n    };\n\n    const firebaseApp = firebase.initializeApp(firebaseConfig);\n\n    const database = firebase.firestore();\n\n    export default database;","import React, {useState, useEffect} from 'react';\nimport TinderCard from 'react-tinder-card'\nimport './DateCards.css'\nimport database from './firebase'\n\nfunction DateCards() {\n\n    const [people, setPeople] = useState([]);\n\n    useEffect(() => {\n        database.collection('people').onSnapshot(snapshot => (\n             setPeople(snapshot.docs.map(doc => doc.data()))\n        ))\n    }, []);\n\n    return (\n        <div>\n            <div className=\"card__container\">\n                {people.map(person => (\n                    <TinderCard\n                        className=\"swipe\"\n                        key={person.id}\n                        preventSwipe={['up','down']}\n                    >\n\n                        <div style={{backgroundImage:`url(${person.url})` }} className=\"card\">\n                            <h3>{person.name}</h3>\n                        </div>\n\n                    </TinderCard>\n\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default DateCards;","import React from 'react';\nimport './App.css';\nimport Header from './Header'\nimport DateCards from './DateCards'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        {/* Header */}\n        <Header/>\n        <Router>\n            <Switch>\n                <Route path=\"/chat\">\n                    <h1>I'm chat page</h1>\n                </Route>\n                <Route path=\"/\">\n                    <DateCards/>\n                </Route>\n\n            </Switch>\n\n\n\n            {/* Cards */}\n\n\n            {/* Footer */}\n\n\n            {/* Chat List Screen */}\n\n\n            {/* Individual Chat Screen */}\n        </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}